<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".debug" #>
<#@ include file="assemblies.t4" #>
<#@ include file="imports.t4" #><#
    string currentDirectory = Directory.GetCurrentDirectory();
    WriteLine("Current Directory: " + currentDirectory);
    Write("Framework Version: ");
    Write(Environment.Version.ToString());
    Write("\n");
#><#
var press = new Press();
press.LoadClasses($@"{currentDirectory}/Examples/Entities");

// Configure deboss
var tsDeboss = new TypescriptDeboss();
tsDeboss.ReferenceClasses = press.Classes;
press.Deboss = tsDeboss;

// Configure templates by specifying a IForme instance.
var forme = new FileLoadForme();
forme.LoadGeneratedTemplate(
  this.Host.ResolvePath($@"{currentDirectory}/Examples/generated.template")
);
forme.LoadClassTemplate(
  this.Host.ResolvePath($@"{currentDirectory}/Examples/NoTypeScript/ts_class.template")
);
forme.LoadPropertyTemplate(
  this.Host.ResolvePath($@"{currentDirectory}/Examples/NoTypeScript/ts_property.template")
);
press.Forme = forme;

// Generate code by "Inking" them.
press.Ink(
  $@"{currentDirectory}/Examples/NoTypeScript/Output", // Output of deboss
  (cls) => $"{press.Deboss.Impress(cls, "${ClassName}", true)}.g.ts" // Filename to deboss into
  );

#>


